<?php

namespace frontend\controllers;

use common\models\Category;
use common\models\Farmer;
use common\models\Good;
use yii\web\Controller;

class GoodController extends Controller
{
    public function beforeAction($action)
    {
        $session = \Yii::$app->session;
        $cart = $session->get('cart');
        if ($cart === null) {
            $session->set('cart', []);
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }


    public function actionCatalog()
    {
        return $this->render('catalog');
    }

    public function actionFullList()
    {
        $this->layout = 'empty';
        $f_ids = \Yii::$app->request->post('f_ids'); //$_POST['f_ids'];
        $c_ids = \Yii::$app->request->post('c_ids');
        $goods = Good::find()->where(['is_visible' => 1]);
        if ($f_ids) {
            $goods = $goods->andWhere(['in', 'farmer_id', $f_ids]);
        }
        if ($c_ids) {
            $goods = $goods->andWhere(['in', 'category_id', $c_ids]);
        }
        $goods = $goods->all();
        return $this->render('full-list', compact('goods'));
    }

    public function actionView($id)
    {
        $this->layout = 'empty';
        $good = Good::findOne($id);
        $session = \Yii::$app->session;
        $cart = $session->get('cart');
        $in_cart = 0;
        if (count($cart) > 0) {
            foreach ($cart as $farmer_id => $good_items) {
                if (isset($good_items[$id])) {
                    $in_cart = $good_items[$id];
                }
            }
        }
        return $this->render('view', compact('good', 'in_cart'));
    }

    public function actionSearchOnline($input)
    {
        $this->layout = 'empty';
        $session = \Yii::$app->session;
        $cart = $session->get('cart');
        $cart_ids = [];
        if (count($cart) > 0) {
            foreach ($cart as $item) {
                if (count($item) > 0) {
                    foreach ($item as $id => $q) {
                        $cart_ids[] = $id;
                    }
                }
            }
        }
        $f_ids = Farmer::find()->where(['is_blocked' => 0])->column();
        $goods = Good::find()->where(['like', 'name', $input])->andWhere(['is_visible' => 1])->andWhere(['in', 'farmer_id', $f_ids])->all();
        return $this->render('search-online', compact('goods', 'cart_ids'));
    }

    public function actionSearchResult($input)
    {
        $ingood_farmer_ids = Good::find()
            ->where(['like', 'name', $input])
            ->andWhere(['is_visible' => 1])
            ->select(['farmer_id'])
            ->distinct()
            ->column();
        $active_farmer_ids = Farmer::find()
            ->where(['is_blocked' => 0])
            ->select(['id'])
            ->column();
        $farmer_ids = array_intersect($ingood_farmer_ids, $active_farmer_ids);
        $farmer_goods = [];
        foreach ($farmer_ids as $farmer_id) {
            $farmer_goods[] = [
                'farmer' => Farmer::findOne($farmer_id),
                'goods' => Good::find()
                    ->where(['like', 'name', $input])
                    ->andWhere(['is_visible' => 1, 'farmer_id' => $farmer_id])
                    // ->where(['is_visible' => 1, 'farmer_id' => $farmer_id, 'category_id' => $category_id])
                    ->all()
            ];
        }

        return $this->render('search-result', compact('farmer_goods'));
    }

    public function actionCompany($id)
    {
        $farmer = Farmer::findOne($id);
        $category_ids = Good::find()
            ->where(['farmer_id' => $id, 'is_visible' => 1])
            ->select(['category_id'])
            ->distinct()
            ->column();
        $categories = Category::findAll($category_ids);
        return $this->render('company', compact('farmer', 'categories'));
    }

    public function actionFarmerGoodList($farmer_id)
    {
        $this->layout = 'empty';
        $category_ids = Good::find()
            ->where(['farmer_id' => $farmer_id, 'is_visible' => 1])
            ->select(['category_id'])
            ->distinct()
            ->column();
        $categories = Category::findAll($category_ids);
        $category_goods = [];
        foreach ($categories as $category) {
            $category_goods[] = [
                'category' => $category,
                'goods' => Good::find()
                    ->where(['farmer_id' => $farmer_id, 'category_id' => $category->id, 'is_visible' => 1])
                    ->all()
            ];
        }

        $goods = Good::find()
            ->where(['farmer_id' => $farmer_id, 'is_visible' => 1])
            ->all();

        return $this->render('farmer-good-list', compact('goods', 'category_goods'));
    }

    public function actionFarmerList()
    {
        $farmers = Farmer::find()->where(['is_blocked' => 0])->all();
        return $this->render('farmer-list', compact('farmers'));
    }

    public function actionCategoryCompaniesAndGoods($category_id)
    {
        $category = Category::findOne($category_id);

        $ingood_farmer_ids = Good::find()
            ->where(['category_id' => $category_id, 'is_visible' => 1])
            ->select(['farmer_id'])
            ->distinct()
            ->column();
        $active_farmer_ids = Farmer::find()
            ->where(['is_blocked' => 0])
            ->select(['id'])
            ->column();
        $farmer_ids = array_intersect($ingood_farmer_ids, $active_farmer_ids);
        $farmer_goods = [];
        foreach ($farmer_ids as $farmer_id) {
            $farmer_goods[] = [
                'farmer' => Farmer::findOne($farmer_id),
                'goods' => Good::find()->where(['is_visible' => 1, 'farmer_id' => $farmer_id, 'category_id' => $category_id])->all()
            ];
        }
        return $this->render('category-companies-and-goods', compact('category', 'farmer_goods'));
    }


    public function actionToCart()
    {
        $good_id = $_POST['good_id'];
        $farmer_id = $_POST['farmer_id'];
        $session = \Yii::$app->session;
        $cart = $session->get('cart');
        if (isset($cart[$farmer_id])) {
            if (isset($cart[$farmer_id][$good_id])) {
                $cart[$farmer_id][$good_id]++;
            } else {
                $cart[$farmer_id][$good_id] = 1;
            }
        } else {
            $cart[$farmer_id] = [];
            $cart[$farmer_id][$good_id] = 1;
        }
        $session->set('cart', $cart);
        return json_encode($cart[$farmer_id][$good_id]);
    }

    public function actionFromCart()
    {
        $good_id = $_POST['good_id'];
        $farmer_id = $_POST['farmer_id'];
        $session = \Yii::$app->session;
        $cart = $session->get('cart');
        if (isset($cart[$farmer_id])) {
            if (isset($cart[$farmer_id][$good_id])) {
                if ($cart[$farmer_id][$good_id] > 1) {
                    $cart[$farmer_id][$good_id]--;
                    $session->set('cart', $cart);
                    return json_encode($cart[$farmer_id][$good_id]);
                } else {
                    unset($cart[$farmer_id][$good_id]);
                    if (count($cart[$farmer_id]) == 0)
                        unset($cart[$farmer_id]);
                }
            }
        }
        $session->set('cart', $cart);
        return json_encode(0);
    }

    public function actionCartCounter()
    {
        $session = \Yii::$app->session;
        $cart = $session->get('cart');
        $counter = 0;
        if (count($cart) > 0) {
            foreach ($cart as $item) {
                $counter += count($item);
            }
        }
        return $counter;
    }
}
